import numpy as np
from scipy.optimize import curve_fit

EPC2305_Zthjc_time = [1.06807E-05, 1.17812E-05, 1.29573E-05, 1.42715E-05, 1.57191E-05, 1.73135E-05, 1.90697E-05, 2.10039E-05, 2.31344E-05, 2.5481E-05, 2.80655E-05, 3.10842E-05, 3.40477E-05, 3.75013E-05, 4.11542E-05, 4.54947E-05, 5.01093E-05, 5.5192E-05, 6.11609E-05, 6.69562E-05, 7.37477E-05, 8.1228E-05, 8.94671E-05, 9.85419E-05, 0.000108537, 0.000119546, 0.000131672, 0.000145028, 0.000159738, 0.000175941, 0.000193787, 0.000213443, 0.000235092, 0.000258938, 0.000285561, 0.000314131, 0.000345994, 0.000383459, 0.000419743, 0.000462319, 0.000509212, 0.000560862, 0.000614145, 0.000680411, 0.000749426, 0.000825442, 0.000909168, 0.001001386, 0.001102958, 0.00121331, 0.001333543, 0.001473776, 0.001623264, 0.00179639, 0.001969265, 0.002169011, 0.002389017, 0.002631339, 0.002898239, 0.003192212, 0.003510126, 0.003872637, 0.004265445, 0.004698096, 0.005174631, 0.005699502, 0.006277611, 0.006914359, 0.007615693, 0.008388165, 0.00923899, 0.010176115, 0.011208294, 0.012345169, 0.013597359, 0.014976561, 0.016495657, 0.018168837, 0.020011731, 0.022041552, 0.024277261, 0.026739742, 0.029451996, 0.032439358, 0.035729733, 0.039353856, 0.04334558, 0.04774219, 0.052584755, 0.057918509, 0.063793274, 0.070263926, 0.077390907, 0.085240788, 0.093886895, 0.10340999, 0.113899027, 0.125451985, 0.138176776, 0.152192264, 0.167629364, 0.184632273, 0.203359815, 0.22398692, 0.246706265, 0.271730068, 0.299292076, 0.329649741, 0.363086631, 0.399915078, 0.440479092, 0.485157578, 0.534367873, 0.588569645, 0.648269188, 0.714024149, 0.786448739, 0.866219469, 0.954081469, 1.010132957]
EPC2305_Zthjc_Znorm = [0.01541854, 0.017133277, 0.01930464, 0.021452732, 0.023777441, 0.026302305, 0.029305769, 0.032417672, 0.035509249, 0.038921158, 0.044017769, 0.049046615, 0.053139701, 0.057560103, 0.063355932, 0.06869666, 0.074365663, 0.080421147, 0.086421287, 0.092682705, 0.097351769, 0.103469375, 0.109110006, 0.114531546, 0.122529066, 0.126859508, 0.129973045, 0.134478419, 0.139688131, 0.147013919, 0.153210446, 0.159041582, 0.171646236, 0.181789786, 0.189611781, 0.200304434, 0.211224027, 0.221250513, 0.232651309, 0.246407108, 0.262045889, 0.27933544, 0.296424527, 0.323607941, 0.344394616, 0.373480503, 0.396594748, 0.419022852, 0.444392275, 0.467989922, 0.506395518, 0.542357295, 0.572298811, 0.606843175, 0.64063145, 0.679995284, 0.716204983, 0.735716947, 0.754119642, 0.773387996, 0.792629075, 0.830924065, 0.839682241, 0.846866187, 0.853552063, 0.860854673, 0.875647861, 0.887199993, 0.9012639, 0.908379237, 0.915550748, 0.919760248, 0.92217436, 0.92702161, 0.928845891, 0.934952793, 0.935565687, 0.946666742, 0.949151476, 0.961043319, 0.962934551, 0.973084154, 0.97755818, 0.984630389, 0.991104058, 0.991104058, 0.991104058, 0.991104058, 0.991104058, 0.992403891, 0.998274266, 0.998274266, 0.998274266, 0.998274266, 0.998274266, 0.998274266, 0.998274266, 0.998274266, 0.998274266, 0.998274266, 0.998274266, 0.998274266, 0.998274266, 0.998274266, 0.998274266, 0.998274266, 0.998274266, 0.998274266, 0.998274266, 0.998274266, 0.998274266, 0.998274266, 0.998274266, 0.998274266, 0.998274266, 0.989805928, 0.980766501, 0.969265577, 0.970536768, 0.973403048]

Zth_j_c_for_denormalization_top = 0.2  # K/W  from junction to top of package
Zth_j_c_for_denormalization_pcb = 1.5  # K/W  from junction to board

# Define the Foster network model
def foster_model(t, *params):
    n = len(params) // 2
    r = params[:n]
    c = params[n:]
    return sum(r[i] * (1 - np.exp(-t / c[i])) for i in range(n))

# Initial guesses for R and C values
initial_guess = [0.1] * 4 + [0.1] * 4  # 4 stages (R1, R2, R3, R4, C1, C2, C3, C4)

# Fit the Foster model to the data
params, _ = curve_fit(foster_model, EPC2305_Zthjc_time, EPC2305_Zthjc_Znorm, p0=initial_guess)

# Extract fitted R and C values
n_stages = len(params) // 2
r_values = params[:n_stages]
c_values = params[n_stages:]

# Print the results
print("Fitted R values:", r_values)
print("Fitted C values:", c_values)
for i in range(n_stages):
    print(f".param R{i+1}_th =", r_values[i] * Zth_j_c_for_denormalization_pcb)
    print(f".param C{i+1}_th =", c_values[i] * Zth_j_c_for_denormalization_pcb)

import matplotlib.pyplot as plt

# Generate the thermal network response using the fitted parameters
fitted_response = foster_model(np.array(EPC2305_Zthjc_time), *params)

# Plot the measured data vs the thermal network response
plt.figure(figsize=(10, 6))
plt.plot(EPC2305_Zthjc_time, [k * Zth_j_c_for_denormalization_pcb for k in EPC2305_Zthjc_Znorm], 'o', label='Measured Data', markersize=4)
plt.plot(EPC2305_Zthjc_time, [k * Zth_j_c_for_denormalization_pcb for k in fitted_response], '-', label='Foster Model Response')
plt.xscale('log')
plt.xlabel('Time (s)')
plt.ylabel('Thermal Impedance (Zth)')
plt.title('Measured Data vs Foster Model Response')
plt.legend()
plt.grid(True)
plt.show()
